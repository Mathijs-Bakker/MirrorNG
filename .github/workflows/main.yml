name: CI
#on:
#  pull_request: {}
#  push: { branches: [master] }

on: 
  push:
    paths-ignore:
      - 'doc/**'
      - '*.md'
  
jobs:

  testRunnerInAllModes:
    name: Unity test
    runs-on: ubuntu-latest
    env:
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
    steps:
      # Checkout repository (required to test local actions)
      - name: Checkout repository
        uses: actions/checkout@v1
    
      - run: echo "$UNITY_LICENSE" | tr -d '\r' > UnityLicenseFile.ulf

      - name: Unity - Activate
        uses: MirrorNG/unity-runner@master
        with:
          args: -manualLicense
            -manualLicenseFile UnityLicenseFile.ulf
      
      - run: ls -l

      - name: Unity Runner
        uses: MirrorNG/unity-runner@master
        with:
          # Arguments to pass to unity
          args: -executeMethod  UnityEditor.SyncVS.SyncSolution -projectPath . -quit
    
      - run: ls -l

      # Configure test runner
      - name: Run editor Tests
        uses: MirrorNG/unity-runner@master
        with:
          args: -runTests -testPlatform editmode Tests/editmode-results.xml

      - name: Sonarscanner for dotnet
        uses: Secbyte/dotnet-sonarscanner@v1.2
        with:
          buildCommand: dotnet build .
          projectKey: MirrorNG_MirrorNG
          projectName: MirrorNG
          sonarOrganisation: mirrorng
          beginArguments: /d:sonar.verbose="true"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            
      # Upload artifacts
      - name: Expose as artifact
        uses: actions/upload-artifact@v1
        with:
          name: Test results (all modes)
          path: ${{ steps.testRunner.outputs.artifactsPath }}

      # Return License
      - name: Unity Runner
        if: always()
        uses: MirrorNG/unity-runner@master
        with:
          # Arguments to pass to unity
          args: -returnlicense -quit
